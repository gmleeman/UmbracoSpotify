@using UmbracoSpotify.Web.Controllers;
@using UmbracoSpotify.Spotify;
@using Umbraco.Web.Models;
@inherits Umbraco.Web.Mvc.UmbracoViewPage<UmbracoSpotify.Web.Models.SearchCriteriaModel>
@{
    Layout = "Master.cshtml";
    RelatedLink nextLink = Umbraco.AssignedContentItem.GetPropertyValue<IEnumerable<RelatedLink>>("mainLink").FirstOrDefault();
}


@using (Html.BeginUmbracoForm("Search", "ChooseFavouriteSongs", null, new { id = "favesForm" }, FormMethod.Get))
{

    <div class="row">
        <div class="col-md-6">
            <p>Enter your search text below</p>
        </div>
        <div class="col-md-6">
            <p>Hit this button to search</p>
        </div>

    </div>
    <div class="row">
        <div class="col-md-6">
            <p>
                @Html.LabelFor(m => m.SearchText, new { style = "display:inline;" }) -
                @Html.TextBoxFor(model => model.SearchText, htmlAttributes: new { @class = "form-control", style = "display:inline;" })
            </p>
            <p>
                @Html.CheckBoxFor(model => model.ListAlbums)
                @Html.LabelFor(m => m.ListAlbums)

                @Html.CheckBoxFor(model => model.ListArtists)
                @Html.LabelFor(m => m.ListArtists)

                @Html.CheckBoxFor(model => model.ListPlaylist)
                @Html.LabelFor(m => m.ListPlaylist)

                @Html.CheckBoxFor(model => model.ListTrack)
                @Html.LabelFor(m => m.ListTrack)
            </p>

        </div>
        <div class="col-md-6">
            <p><input type="submit" name = "submitSearch" value ="Refresh Search" class="btn btn-primary btn-lg" /></p>
        </div>

    </div>
    <div class="row">
        <div class="col-md-6">
            <input type="hidden" name="ShowPage" value="0" id="ShowPage" />
            <p>
                @if (Model.PageNumber > 1)
                {
                    <input id="previouspageButton" name="previouspageButton" type="button" class="btn btn-primary btn-lg" value="< previous page @Model.PreviousPage()" />
                }
            </p>
        </div>
        <div class="col-md-6">
            <p>
                @if (Model.IsNextPage)
                {
                    <input id="nextpageButton" name="nextpageButton" type="button" class="btn btn-primary btn-lg" value="next page @Model.NextPage() >" />
                }
            </p>
        </div>
    </div>


    <div class="row">
        <div class="col-md-6">
            @if (Model.FavouriteTracks.Count() == 0)
            {
                <p><strong>No favourite tracks chosen yet.  Please click on a Track to add it to favourites</strong></p>
            }
            else
            {
                <p>Favourite Tracks (up to 5)</p>
                for (int ii = 0; ii < Model.FavouriteTracks.Count(); ii++)
                {
                    <p>
                        @Html.HiddenFor(m => m.FavouriteTracks[ii].TrackID)
                        @Html.EditorFor(m => m.FavouriteTracks[ii].TrackName)
                    </p>
                }
            }
        </div>
        <div class="col-md-6">
            @if (Model.FavouriteTracks.Count() > 0)
            {
                if (nextLink != null && !string.IsNullOrEmpty(nextLink.Link))
                {
                    <a href="@nextLink.Link" class="submit btn btn-primary btn-lg">@nextLink.Caption</a>
                }
            }


        </div>
    </div>
}
<h2>Spotify search results</h2>
<div>

    <div class="row">
        @if (Model.ListAlbums)
        {
            <div class=@Model.GetBootStrapColWidth()>
                <p><strong>Albums</strong></p>
            </div>
        }
        @if (Model.ListArtists)
        {
            <div class=@Model.GetBootStrapColWidth()>
                <p><strong>Artists</strong></p>
            </div>
        }
        @if (Model.ListPlaylist)
        {
            <div class=@Model.GetBootStrapColWidth()>
                <p><strong>Playlists</strong></p>
            </div>
        }
        @if (Model.ListTrack)
        {
            <div class=@Model.GetBootStrapColWidth()>
                <p><strong>Tracks</strong></p>
            </div>
        }
    </div>


    <div class="row">
        @if (Model.ListAlbums)
        {
            <div class=@Model.GetBootStrapColWidth()>
                @if (ViewBag.SearchSpotify != null && ((SpotifySearchResults)ViewBag.SearchSpotify).albums != null)
                {
                    foreach (Item plist in ((SpotifySearchResults)ViewBag.SearchSpotify).albums.items)
                    {
                        <a href=@plist.external_urls.spotify>@plist.name</a><br />
                    }
                }
            </div>
        }
        @if (Model.ListArtists)
        {
            <div class=@Model.GetBootStrapColWidth()>
                @if (ViewBag.SearchSpotify != null && ((SpotifySearchResults)ViewBag.SearchSpotify).artists != null)
                {
                    foreach (Item2 plist in ((SpotifySearchResults)ViewBag.SearchSpotify).artists.items)
                    {
                        <a href=@plist.external_urls.spotify>@plist.name</a><br />
                    }
                }
            </div>
        }
        @if (Model.ListPlaylist)
        {
            <div class=@Model.GetBootStrapColWidth()>
                @if (ViewBag.SearchSpotify != null)
                {
                    foreach (Item4 plist in ((SpotifySearchResults)ViewBag.SearchSpotify).playlists.items)
                    {
                        <a href=@plist.external_urls.spotify>@plist.name</a><br />
                    }
                }
            </div>
        }
        @if (Model.ListTrack)
        {
            <div class=@Model.GetBootStrapColWidth()>
                @if (ViewBag.SearchSpotify != null && ((SpotifySearchResults)ViewBag.SearchSpotify).tracks != null)
                {
                    foreach (TrackObject track in ((SpotifySearchResults)ViewBag.SearchSpotify).tracks.items)
                    {
                        using (Html.BeginUmbracoForm("AddFavouriteTrack", "ChooseFavouriteSongs", FormMethod.Get))
                        {
                            @Html.HiddenFor(m => m.SearchText)
                            @Html.HiddenFor(m => m.ListAlbums)
                            @Html.HiddenFor(m => m.ListArtists)
                            @Html.HiddenFor(m => m.ListPlaylist)
                            @Html.HiddenFor(m => m.ListTrack)
                            for (int ii = 0; ii < Model.FavouriteTracks.Count(); ii++)
                            {
                                @Html.HiddenFor(m => m.FavouriteTracks[ii].TrackID)
                                @Html.HiddenFor(m => m.FavouriteTracks[ii].TrackName)
                            }
                            <input type="hidden" value="@track.id" name="addtrackid" />
                            <input type="hidden" value="@track.name" name="addtrackname" />
                            <input type="submit" value="@track.name (@track.artists.FirstOrDefault().name)" class="btn btn-link" />
                        }
                    }
                }
            </div>
        }
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $("#nextpageButton").click(function () {
            $("#ShowPage").val("@Model.NextPage()");
            $("#favesForm").submit();
        });

        $("#previouspageButton").click(function () {
            $("#ShowPage").val("@Model.PreviousPage()");
            $("#favesForm").submit();
        });
    });
</script>

